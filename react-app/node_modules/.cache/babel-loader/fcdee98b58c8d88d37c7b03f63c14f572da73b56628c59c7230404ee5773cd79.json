{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\seba\\\\Documents\\\\pagina\\\\react-app\\\\src\\\\components\\\\HtmlLoader.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HtmlLoader({\n  src\n}) {\n  _s();\n  const [html, setHtml] = useState('Loading...');\n  useEffect(() => {\n    let cancelled = false;\n    fetch(src).then(r => r.text()).then(text => {\n      if (cancelled) return;\n      try {\n        // extract body content if it's a full HTML\n        const bodyMatch = text.match(/<body[^>]*>([\\s\\S]*)<\\/body>/i);\n        setHtml(bodyMatch ? bodyMatch[1] : text);\n      } catch (e) {\n        setHtml(text);\n      }\n    }).catch(err => setHtml('<pre style=\"color:red\">Error loading content</pre>'));\n    return () => {\n      cancelled = true;\n    };\n  }, [src]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n}\n_s(HtmlLoader, \"TE5wbiEWm3sQK93/s+WGABwhzi0=\");\n_c = HtmlLoader;\nvar _c;\n$RefreshReg$(_c, \"HtmlLoader\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","HtmlLoader","src","_s","html","setHtml","cancelled","fetch","then","r","text","bodyMatch","match","e","catch","err","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/seba/Documents/pagina/react-app/src/components/HtmlLoader.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nexport default function HtmlLoader({ src }){\r\n  const [html, setHtml] = useState('Loading...')\r\n\r\n  useEffect(()=>{\r\n    let cancelled = false\r\n    fetch(src).then(r => r.text()).then(text => {\r\n      if(cancelled) return\r\n      try{\r\n        // extract body content if it's a full HTML\r\n        const bodyMatch = text.match(/<body[^>]*>([\\s\\S]*)<\\/body>/i)\r\n        setHtml(bodyMatch ? bodyMatch[1] : text)\r\n      }catch(e){\r\n        setHtml(text)\r\n      }\r\n    }).catch(err => setHtml('<pre style=\"color:red\">Error loading content</pre>'))\r\n\r\n    return ()=>{ cancelled = true }\r\n  },[src])\r\n\r\n  return <div dangerouslySetInnerHTML={{__html: html}} />\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,eAAe,SAASC,UAAUA,CAAC;EAAEC;AAAI,CAAC,EAAC;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,YAAY,CAAC;EAE9CD,SAAS,CAAC,MAAI;IACZ,IAAIS,SAAS,GAAG,KAAK;IACrBC,KAAK,CAACL,GAAG,CAAC,CAACM,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,CAACE,IAAI,IAAI;MAC1C,IAAGJ,SAAS,EAAE;MACd,IAAG;QACD;QACA,MAAMK,SAAS,GAAGD,IAAI,CAACE,KAAK,CAAC,+BAA+B,CAAC;QAC7DP,OAAO,CAACM,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAGD,IAAI,CAAC;MAC1C,CAAC,QAAMG,CAAC,EAAC;QACPR,OAAO,CAACK,IAAI,CAAC;MACf;IACF,CAAC,CAAC,CAACI,KAAK,CAACC,GAAG,IAAIV,OAAO,CAAC,oDAAoD,CAAC,CAAC;IAE9E,OAAO,MAAI;MAAEC,SAAS,GAAG,IAAI;IAAC,CAAC;EACjC,CAAC,EAAC,CAACJ,GAAG,CAAC,CAAC;EAER,oBAAOF,OAAA;IAAKgB,uBAAuB,EAAE;MAACC,MAAM,EAAEb;IAAI;EAAE;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzD;AAAClB,EAAA,CApBuBF,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}